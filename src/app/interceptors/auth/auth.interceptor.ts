

import { HttpInterceptorFn } from '@angular/common/http';
import { inject } from "@angular/core";
import { AuthService } from "../../services/auth/auth.service";
import { Router } from "@angular/router";
import { NEVER, from } from "rxjs";

const AUTH_URLS_TO_EXCLUDE_TOKEN = ['login', 'register', 'validate-email', 'resend-code', 'check-email', 'geocoding/coordinates' ,'geocode'];

export const authInterceptor: HttpInterceptorFn = (req, next) => {
  const authService = inject(AuthService);
  const router = inject(Router);

  const token = authService.tokenValue;
  let toHandle = req;

  // 1. On vÃ©rifie si c'est une requÃªte d'AUTH (oÃ¹ on ne doit jamais ajouter le jeton)
  const isAuthUrl = AUTH_URLS_TO_EXCLUDE_TOKEN.some(url => req.url.includes(url));

  // 2. Si un jeton est prÃ©sent ET que ce n'est PAS une requÃªte d'AUTH
  if (token && !isAuthUrl) {
    //  On ajoute le jeton Ã  la requÃªte (Bornes, RÃ©servations, etc.)
    toHandle = req.clone({
      headers: req.headers.set('Authorization', `Bearer ${token}`)
    });
  }

  // 3. Si aucun jeton n'est prÃ©sent (et que la route n'est pas d'AUTH),
  // la requÃªte continuera SANS jeton.
  // ğŸš¨ Le backend doit alors renvoyer 401/403 si la route est privÃ©e.

  // 4. Blocage explicite pour la dÃ©connexion aprÃ¨s Ã©chec du jeton (Ancienne logique)
  // On ne doit faire cela que si c'est une requÃªte XHR qui Ã©choue car elle est PRIVÃ‰E.
  // Laisser le backend gÃ©rer l'Ã©chec 401/403 et utiliser un gestionnaire global d'erreurs (Global HTTP Error Handler)
  // est la meilleure pratique, mais pour rester simple, nous gÃ©rons la dÃ©connexion ici
  // seulement si le jeton est manquant et qu'on accÃ¨de Ã  une URL qui n'est pas d'auth.
  if (!token && !isAuthUrl && req.url.includes('user')) {
    // Si la route contient 'user' et qu'on n'a pas de jeton, c'est trÃ¨s probablement une erreur.
    console.warn(`Tentative d'accÃ¨s Ã  une route protÃ©gÃ©e sans token â†’ redirection`);
    authService.logout();
    router.navigate(['/']);
    return from(NEVER); // Bloque la requÃªte pour Ã©viter des erreurs inutiles
  }


  return next(toHandle);
};
